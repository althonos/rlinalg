name: Test

on:
  - push
  - pull_request

jobs:

  lint:
    name: Test (Linux)
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Setup Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
    - name: Install black
      run: python -m pip install -U black 
    - name: Check code format
      run: python -m black --check .

  test-linux:
    name: Test (Linux)
    runs-on: ubuntu-22.04
    env:
      OS: Linux
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        include:
        - python-version: 3.7
          python-release: v3.7
          python-impl: CPython
        - python-version: 3.8
          python-release: v3.8
          python-impl: CPython
        - python-version: 3.9
          python-release: v3.9
          python-impl: CPython
        - python-version: '3.10'
          python-release: v3.10
          python-impl: CPython
        - python-version: 3.11
          python-release: v3.11
          python-impl: CPython
        - python-version: 3.12
          python-release: v3.12
          python-impl: CPython
        - python-version: pypy-3.7
          python-release: v3.7
          python-impl: PyPy
        - python-version: pypy-3.8
          python-release: v3.8
          python-impl: PyPy
        - python-version: pypy-3.9
          python-release: v3.9
          python-impl: PyPy
        #- python-version: pypy-3.10
        #  python-release: v3.10
        #  python-impl: PyPy
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: true
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup Fortran
      uses: fortran-lang/setup-fortran@v1
      with:
        compiler: gcc
        version: 12
    - name: Install OpenBLAS
      run: sudo apt-get install -y libopenblas-dev
    - name: Update pip
      run: python -m pip install -U pip
    - name: Install requirements
      run: python -m pip install --prefer-binary -r .github/workflows/requirements.txt
    - name: Install Package
      run: python -m pip install --no-build-isolation --editable .
    - name: Test with coverage
      run: python -m coverage run -m unittest discover -vv
    - name: Upload to Codecov
      if: matrix.python-impl == 'CPython'
      uses: codecov/codecov-action@v3
      with:
        flags: ${{ matrix.python-impl }},${{ matrix.python-release }},${{ env.OS }}
        name: test-python-${{ matrix.python-version }}
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  # test_osx:
  #   name: Test (OSX)
  #   runs-on: macOS-12
  #   env:
  #     OS: OSX
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #       - python-version: 3.7
  #         python-release: v3.7
  #         python-impl: CPython
  #       - python-version: 3.8
  #         python-release: v3.8
  #         python-impl: CPython
  #       - python-version: 3.9
  #         python-release: v3.9
  #         python-impl: CPython
  #       - python-version: '3.10'
  #         python-release: v3.10
  #         python-impl: CPython
  #       - python-version: '3.11'
  #         python-release: v3.11
  #         python-impl: CPython
  #       - python-version: '3.12'
  #         python-release: v3.12
  #         python-impl: CPython
  #       - python-version: pypy-3.7
  #         python-release: v3.7
  #         python-impl: PyPy
  #       - python-version: pypy-3.8
  #         python-release: v3.8
  #         python-impl: PyPy
  #       - python-version: pypy-3.9
  #         python-release: v3.9
  #         python-impl: PyPy
  #       - python-version: pypy-3.10
  #         python-release: v3.10
  #         python-impl: PyPy
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2
  #     with:
  #       submodules: true
  #   - name: Setup Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #   - name: Setup deployment target
  #     shell: bash
  #     if: ${{ startsWith(matrix.python-version, 'pypy') || matrix.python-version == '3.11' || matrix.python-version == '3.12' }}
  #     run: echo "MACOSX_DEPLOYMENT_TARGET=10.12" >> $GITHUB_ENV
  #   - name: Update pip
  #     run: python -m pip install -U pip wheel setuptools
  #   - name: Install Python requirements
  #     run: python -m pip install -r .github/workflows/requirements.txt
  #   - name: Build C extension in debug mode
  #     run: python setup.py build_ext --inplace --debug --plat-name macos-x86_64
  #   - name: Test with coverage
  #     run: python -m coverage run -m unittest discover -vv
  #   - name: Upload to Codecov
  #     if: matrix.python-impl == 'CPython'
  #     uses: codecov/codecov-action@v3
  #     with:
  #       flags: ${{ matrix.python-impl }},${{ matrix.python-release }},${{ env.OS }}
  #       name: test-python-${{ matrix.python-version }}
  #       fail_ci_if_error: true
  #       token: ${{ secrets.CODECOV_TOKEN }}

  # test_windows:
  #   name: Test (Windows)
  #   runs-on: windows-latest
  #   env:
  #     OS: Windows
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #       - python-version: 3.6
  #         python-release: v3.6
  #         python-impl: CPython
  #       - python-version: 3.7
  #         python-release: v3.7
  #         python-impl: CPython
  #       - python-version: 3.8
  #         python-release: v3.8
  #         python-impl: CPython
  #       - python-version: 3.9
  #         python-release: v3.9
  #         python-impl: CPython
  #       - python-version: '3.10'
  #         python-release: v3.10
  #         python-impl: CPython
  #       - python-version: '3.11'
  #         python-release: v3.11
  #         python-impl: CPython
  #       - python-version: '3.12'
  #         python-release: v3.12
  #         python-impl: CPython
  #       - python-version: pypy-3.7
  #         python-release: v3.7
  #         python-impl: PyPy
  #       - python-version: pypy-3.8
  #         python-release: v3.8
  #         python-impl: PyPy
  #       - python-version: pypy-3.9
  #         python-release: v3.9
  #         python-impl: PyPy
  #       - python-version: pypy-3.10
  #         python-release: v3.10
  #         python-impl: PyPy
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2
  #     with:
  #       submodules: true
  #   - name: Setup Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #       architecture: x64
  #   - name: Update pip
  #     run: python -m pip install -U pip wheel setuptools
  #   - name: Install Python requirements
  #     run: python -m pip install -r .github/workflows/requirements.txt
  #   - name: Build C extension
  #     run: python setup.py build_ext --inplace
  #   - name: Test without coverage
  #     run: python -m unittest discover -vv

  wheel-linux-x86_64:
    name: Package (Linux, x86-64)
    runs-on: ubuntu-22.04
    if: "startsWith(github.ref, 'refs/tags/v')"
    env:
      OS: Linux
    needs: test-linux
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: true
    - name: Setup Python "3.12"
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Build manylinux wheels
      uses: pypa/cibuildwheel@v2.19.2
      env:
        CIBW_ARCHS: "x86_64"
        CIBW_BUILD: "*-manylinux_x86_64"
        CIBW_BUILD_VERBOSITY: 2
        CIBW_TEST_COMMAND: python -m unittest -vv rlinalg.tests
      with:
        output-dir: dist
    - uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: dist/*

  sdist:
    runs-on: ubuntu-latest
    name: Build source distribution
    needs: test-linux
    if: "startsWith(github.ref, 'refs/tags/v')"
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Set up Python 3.12
      uses: actions/setup-python@v2
      with:
        python-version: "3.12"
    - name: Setup Fortran
      uses: fortran-lang/setup-fortran@v1
      with:
        compiler: gcc
        version: 12
    - name: Install OpenBLAS
      run: sudo apt-get install -y libopenblas-dev
    - name: Install setup requirements
      run: python -m pip install -U build
    - name: Build source distribution
      run: python -m build --sdist
    - name: Store built source distribution
      uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: dist/*

  upload:
    environment: PyPI
    runs-on: ubuntu-latest
    name: Upload
    if: "startsWith(github.ref, 'refs/tags/v')"
    needs:
    - sdist
    - wheel-linux-x86_64
    permissions:
      id-token: write
    steps:
    - name: Download built wheels
      uses: actions/download-artifact@v2
      with:
        name: wheels
        path: dist
    - name: Publish distributions to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  release:
    environment: GitHub Releases
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/v')"
    name: Release
    needs: upload
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Release a Changelog
      uses: rasmus-saks/release-a-changelog-action@v1.0.1
      with:
        github-token: '${{ secrets.GITHUB_TOKEN }}'